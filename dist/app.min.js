'use strict';

(function (angular) {
  angular.module('Floaters', ['firebase', 'ui.router', 'ui.bootstrap', 'monospaced.qrcode']);
})(angular);
'use strict';

(function (angular, firebase) {
  var firebaseConn = firebase.initializeApp({
    apiKey: 'AIzaSyAxVfoAzfvSXqNb4IYvVHdRBA1v2HmiJZI',
    authDomain: 'firestarter-c211c.firebaseapp.com',
    databaseURL: 'https://firestarter-c211c.firebaseio.com',
    storageBucket: 'firestarter-c211c.appspot.com',
    messagingSenderId: '37797816176'
  });

  angular.module('Floaters').constant('db', firebaseConn.database()).constant('auth', firebase.auth()).constant('authProvider', new firebase.auth.GoogleAuthProvider()).run(['$rootScope', function ($rootScope) {
    firebase.auth().onAuthStateChanged(function (user) {
      if (user) {
        $rootScope.user = user; // eslint-disable-line no-param-reassign
        $rootScope.$digest();
      }
    });
  }]);
})(angular, firebase);
'use strict';

(function (angular) {
  angular.module('Floaters').config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $stateProvider.state('parade', {
      url: '/',
      component: 'parade'
    }).state('whatever', {
      url: '/whatever',
      component: 'whatever'
    }).state('floats', {
      url: '/floats',
      component: 'floats'
    });

    $urlRouterProvider.otherwise('/');
  }]);
})(angular);
'use strict';

(function (angular) {
  function getUserRef(db, $rootScope, $q) {
    return $q(function (resolve) {
      $rootScope.getUser.then(function (user) {
        resolve(db.ref(user.uid));
      });
    });
  }

  angular.module('Floaters').service('firebaseService', ['db', '$rootScope', '$q', function (db, $rootScope, $q) {
    this.getUserRef = function () {
      return getUserRef(db, $rootScope, $q);
    };
    this.rootRef = db.ref();
    this.floats = db.ref('floats');
    //      this.accounts = db.ref('accounts');
    //      this.requests = db.ref('collaborationRequests');
  }]);
})(angular);
'use strict';

(function (angular) {
    angular.module('Floaters').service('geoLocationService', ['$q', '$window', function ($q, $window) {
        this.getCurrentPosition = function () {
            var deferred = $q.defer();

            if (!$window.navigator.geolocation) {
                deferred.reject('Geolocation not supported.');
            } else {
                $window.navigator.geolocation.getCurrentPosition(function (position) {
                    deferred.resolve(position);
                }, function (err) {
                    deferred.reject(err);
                });
            }

            return deferred.promise;
        };

        this.getDistanceBetween = function (crd1, crd2) {
            console.log(crd1, crd2);
            var R = 6371; // Radius of the earth in km
            var dLat = deg2rad(crd2.lat - crd1.lat); // deg2rad below
            var dLon = deg2rad(crd2.long - crd1.long);
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(crd1.lat)) * Math.cos(deg2rad(crd2.lat)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c; // Distance in km
            return d;
        };

        function deg2rad(deg) {
            return deg * (Math.PI / 180);
        }
    }]);
})(angular);
'use strict';

(function () {
  function FloatsController(firebaseService, $firebaseArray, $uibModal, $log, $document) {
    var $ctrl = this;

    $ctrl.newFloat = {
      name: 'BOgus NaME',
      description: '',
      imageUrl: '',
      position: null
    };

    $ctrl.floats = $firebaseArray(firebaseService.floats);

    $ctrl.openEditFloat = function (_float) {
      var modalInstance = $uibModal.open({
        animation: true,
        component: 'modalComponent',
        resolve: {
          float: function float() {
            return _float;
          }
        }
      });

      modalInstance.result.then(function (newFloat) {
        $ctrl.saveFloat(newFloat);
      }, function () {
        $log.info('modal-component dismissed at: ' + new Date());
      });
    };

    $ctrl.saveFloat = function (float) {
      var save = float.$id ? $ctrl.floats.$save : $ctrl.floats.$add;

      float.position.lat = parseFloat(float.position.lat);
      float.position.long = parseFloat(float.position.long);

      save(float).then(function (newRef) {
        float.$id = newRef.key;
        // tagService.applySelectedTags(event, types.event);
        $ctrl.newFloat = {};
      });
    };
  }

  angular.module('Floaters').component('floats', {
    templateUrl: 'views/floats.html',
    controller: ['firebaseService', '$firebaseArray', '$uibModal', '$log', '$document', FloatsController]
  });

  angular.module('Floaters').component('modalComponent', {
    templateUrl: 'addFloat.html',
    bindings: {
      resolve: '<',
      close: '&',
      dismiss: '&'
    },
    controller: function controller() {
      var $ctrl = this;

      $ctrl.$onInit = function () {
        $ctrl.float = $ctrl.resolve.float;
      };

      $ctrl.ok = function () {
        $ctrl.close({
          $value: $ctrl.float
        });
      };

      $ctrl.cancel = function () {
        $ctrl.dismiss({
          $value: 'cancel'
        });
      };
    }
  });
})();
'use strict';

(function () {
  function MainNavController(auth, authProvider) {
    function login() {
      // firebase.config.js sets $rootScope.user async
      auth.signInWithPopup(authProvider);
    }

    this.login = login;

    this.logout = function () {
      auth.signOut();
    };
  }
  angular.module('Floaters').component('mainNav', {
    templateUrl: 'views/mainNav.html',
    controller: ['auth', 'authProvider', MainNavController],
    controllerAs: 'mainNavController'
  });
})();
'use strict';

(function () {
  function ParadeController(firebaseService, $firebaseArray, geoLocationService, $scope) {
    var $ctrl = this;

    $ctrl.floats = $firebaseArray(firebaseService.floats);

    $ctrl.findNearest = function () {
      console.log('finding nearest');
      var closest = geoLocationService.getDistanceBetween($ctrl.floats[0].position, $ctrl.coords);
      var closestIdx = 0;

      for (var i = 1; i < $ctrl.floats.length; i++) {
        var dist = geoLocationService.getDistanceBetween($ctrl.floats[i].position, $ctrl.coords);
        console.log(dist, closest, closestIdx);
        if (dist < closest) {
          closest = dist;
          closestIdx = i;
        }
      }

      $scope.active = closestIdx;
    };

    $scope.$watch('active', function (newIdx, oldIdx) {
      if (!angular.isDefined(newIdx) || !angular.isDefined($ctrl.coords)) {
        return;
      }

      $ctrl.distance = geoLocationService.getDistanceBetween($ctrl.floats[newIdx].position, $ctrl.coords);
    });

    geoLocationService.getCurrentPosition().then(function (data) {
      $ctrl.coords = {
        lat: data.coords.latitude,
        long: data.coords.longitude
      };

      $ctrl.distance = geoLocationService.getDistanceBetween($ctrl.floats[$scope.active].position, $ctrl.coords);
    });
  }
  angular.module('Floaters').component('parade', {
    templateUrl: 'views/parade.html',
    controller: ['firebaseService', '$firebaseArray', 'geoLocationService', '$scope', ParadeController]
  });
})();
'use strict';

(function () {
  function WhateverController(geoLocationService) {
    var self = this;
    geoLocationService.getCurrentPosition().then(function (data) {
      console.log(data);
      self.coords = {
        lat: data.coords.latitude,
        long: data.coords.longitude
      };

      var crd1 = {
        lat: 36.847663,
        long: -76.293295
      };

      var crd2 = {
        lat: 36.844100,
        long: -76.287566
      };

      self.distance = geoLocationService.getDistanceBetween(self.coords, crd2);
    });
  }
  angular.module('Floaters').component('whatever', {
    templateUrl: 'views/whatever.html',
    controller: ['geoLocationService', WhateverController]
  });
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
